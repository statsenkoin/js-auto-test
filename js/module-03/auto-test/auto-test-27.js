/** ОПЕРАЦІЯ SPREAD ПРИ ПЕРЕДАЧІ АРГУМЕНТІВ
Синтаксис ... (spread) дозволяє розподілити колекцію елементів (масив, рядок 
або об'єкт) в місце, в якому очікується набір окремих значень. Звичайно, 
існують деякі обмеження, наприклад, не можна розподілити масив в об'єкт і навпаки.

Можна навести аналогію з ящиком яблук. Поставивши ящик на підлогу, не виймаючи 
з нього яблука, отримаємо аналог масиву значень. Якщо висипати яблука з ящика 
на підлогу, відбудеться розподіл - набір окремих значень.

Відмінність лише одна - в JavaScript розподіл не змінює оригінальну колекцію, 
тобто створюється копія кожного елемента. Після розподілу залишиться і ящик 
повний яблук, і копія кожного яблука на підлозі.

Наприклад, метод Math.max (аргументи) шукає і повертає найбільший з аргументів 
(чисел), тобто очікує не масив значень, а довільну кількість аргументів.

const temps = [14, -4, 25, 8, 11];

// В консолі буде масив
console.log(temps);
// ❌ Так не спрацює, тому що передаємо цілий масив
console.log(Math.max(temps)); // NaN

// В консолі буде набір окремих чисел
console.log(...temps);
// ✅ Розподілимо колекцію елементів у якості окремих аргументів
console.log(Math.max(...temps)); // 25

Тобто запис Math.max (... [14, -4, 25, 8, 11]), після інтерпретації 
перетворюється у Math.max (14, -4, 25, 8, 11) - синтаксис ... повертає 
розпакований масив, тобто розподіляє його елементи у якості окремих аргументів.

// ----------------------------------------------------------------------
У змінній scores зберігається масив результатів тестування. Використовуючи 
розподіл і методи Math.max() і Math.min(), доповни код таким чином, щоб у 
змінній bestScore був найвищий бал, а у worstScore - найнижчий.

*/

const scores = [89, 64, 42, 17, 93, 51, 26];
// Change code below this line
const bestScore = Math.max(...scores);
const worstScore = Math.min(...scores);

// -----------------------------------------------------
console.log(bestScore);
console.log(worstScore);
