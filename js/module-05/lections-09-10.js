// ============================================================================
// ===== lesson 09 ============================================================
// ============================================================================

/**  Example 1 - –ú–∞–π—Å—Ç–µ—Ä–Ω—è –∫–æ—à—Ç–æ–≤–Ω–æ—Å—Ç–µ–π
–ù–∞–ø–∏—à—ñ—Ç—å –º–µ—Ç–æ–¥ calcTotalPrice(stoneName), —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –Ω–∞–∑–≤—É –∫–∞–º–µ–Ω—é —Ç–∞ 
—Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º–µ–Ω—ñ–≤ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º, —Ü—ñ–Ω–æ—é —Ç–∞ 
–∫—ñ–ª—å–∫—ñ—Å—Ç—é —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ stones.
*/
// const chopShop = {
//   stones: [
//     { name: 'Emerald', price: 1300, quantity: 4 },
//     { name: 'Diamond', price: 2700, quantity: 3 },
//     { name: 'Sapphire', price: 1400, quantity: 7 },
//     { name: 'Ruby', price: 800, quantity: 2 },
//   ],
//   calcTotalPrice(stoneName) {
//     // const chosenStone = this.stones.find((stone) => stone.name === stoneName);
//     // const totalPrice = chosenStone.price * chosenStone.quantity;
//     // return totalPrice;

//     const chosenStone = this.stones.find(({ name }) => name === stoneName);
//     return chosenStone ? chosenStone.price * chosenStone.quantity : 'Error!!!';
//   },
// };

// console.log(chopShop.calcTotalPrice('Emerald'));
// console.log(chopShop.calcTotalPrice('Sapphire'));
// console.log(chopShop.calcTotalPrice('Ametist'));
// ----------------------------------------------------------------------------

/**  Example 3 - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
–°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç calculator —ñ–∑ —Ç—Ä—å–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏:

read(a, b)- –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —è–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∞.
add() - –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.
mult() - –ø–µ—Ä–µ–º–Ω–æ–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
*/

// const calculator = {
//   a: 0,
//   b: 0,
//   read(a, b) {
//     console.log('a', a);
//     console.log('b', b);
//     // this.a = a;
//     // this.b = b
//     this.a = a || 0; // 0, NaN, null, undefined, "", false
//     this.b = b ?? 0; // null undefined
//   },
//   add() {
//     return this.a + this.b;
//   },
//   mult() {
//     return this.a * this.b;
//   },
// };
// calculator.read(7);
// console.log(calculator.add());
// console.log(calculator.mult());

// const calc = {
//   a: 24,
//   b: 100,
// };

// console.log(calculator.add.call(calc));
/** */
// ============================================================================
// ===== lesson 10 ============================================================
// ============================================================================

// let i = 0;

// function foo() {
//   i += 1;
//   if (i < 10) {
//     foo();
//   }
//   return i;
// }
// console.log(foo());
// ----------------------------------------------------------------------------

/** Example 1 - –ë–ª–æ–≥–µ—Ä
–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
age - –≤—ñ–∫, —á–∏—Å–ª–æ
numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä

–ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

–î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} 
years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts.

–î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å 
–ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.
*/

// class User {
//   constructor({ name, age, numberOfPosts, topics }) {
//     this.name = name;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }
//   getInfo() {
//     return `User ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts`;
//   }
//   updatePostCount(value) {
//     this.numberOfPosts += value;
//   }
// }

// const mango = new User({
//   name: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango);
// console.log(mango.getInfo());
// // User mango@mail.com is 24 years old and has 20 posts

// mango.updatePostCount(5);
// console.log(mango.getInfo());
// // User mango@mail.com is 24 years old and has 25 posts

// const poly = new User({
//   name: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });

// console.log(poly.getInfo());
// // User poly@mail.com is 19 years old and has 17 posts

// poly.updatePostCount(12);
// console.log(poly.getInfo());
// // User poly@mail.com is 19 years old and has 21 posts

// ----------------------------------------------------------------------------

/**  Example 2 - –°—Ö–æ–≤–∏—â–µ
–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. 
–ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ 
–∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.
*/

// class Storage {
//   #productItems = [];
//   constructor(items) {
//     this.#productItems = items;
//   }
//   getItems() {
//     return this.#productItems;
//   }
//   addItem(item) {
//     //   this.#productItems.push(item);

//     if (!this.#productItems.includes(item)) this.#productItems.push(item);
//   }
//   removeItem(item) {
//     // const index = this.#productItems.indexOf(item);
//     // this.#productItems.splice(index, 1);

//     // if (this.#productItems.includes(item)) {
//     //   const index = this.#productItems.indexOf(item);
//     //   this.#productItems.splice(index, 1);
//     // }

//     const index = this.#productItems.indexOf(item);
//     if (!!~index) this.#productItems.splice(index, 1);
//   }
// }

// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// const items = storage.getItems();
// console.log(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// storage.addItem('üçã');
// console.log(storage.getItems()); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// storage.removeItem('üçé');
// console.table(storage.getItems()); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// ----------------------------------------------------------------------------

/** Example 3 - User
–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. 
–û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ 
–≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email.
*/

// class User {
//   #login = 'user';
//   #email = 'user@user.com';
//   constructor({ login, email }) {
//     this.#login = login;
//     this.#email = email;
//   }
//   get login() {
//     return this.#login;
//   }
//   set login(userLogin) {
//     this.#login = userLogin;
//   }
//   get email() {
//     return this.#email;
//   }
//   set email(userEmail) {
//     this.#login = userEmail;
//   }
// }

// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });

// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie
// console.log(poly.email); // Polycutie

/** Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
–ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. 
–ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. 
–î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è 
–æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
{
  LOW: 'low',
  NORMAL: 'normal',
  HIGH: 'high'
}
–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).
*/

// class Notes {
//   static Priority = {
//     LOW: 'low',
//     NORMAL: 'normal',
//     HIGH: 'high',
//   };
//   constructor(arr) {
//     this.items = arr;
//   }
//   addNote(note) {
//     this.items.push(note);
//   }
//   removeNote(text) {
//     const index = this.items.findIndex((item) => item.text === text);
//     if (!!~index) this.items.splice(index, 1);
//   }
//   updatePriority(text, newPriority) {
//     const index = this.items.findIndex((item) => item.text === text);
//     if (!!~index) this.items[index].priority = newPriority;
//   }
// }

// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// // myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// // console.log(myNotes.items);

// myNotes.updatePriority('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);

/** Example 5 - Toggle
–ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Toggle —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {isOpen: boolean} —ñ 
–æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å on - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 
–∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ on –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ false.
*/

// class Toggle {
//   constructor(on = { isOpen: false }) {
//     this.on = on;
//   }
//   toggle() {
//     this.on.isOpen = !this.on.isOpen;
//   }
// }

// const zeroToggle = new Toggle();
// console.log(zeroToggle);
// const firstToggle = new Toggle({ isOpen: true });

// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');

// const secondToggle = new Toggle();
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');

// ============================================================================
// ===== –∑–∞–º–∏–∫–∞–Ω–Ω—è closures ===================================================
// ============================================================================

// function foo(param) {
//   const value = 10;
//   const value2 = 15;

//   function boo(someValue) {
//     return value + value2 * someValue;
//   }

//   if (param > 20) {
//     return boo;
//   } else {
//     return value;
//   }
// }
// console.log(foo(10));
// console.log(foo(25)(11));
// const result = foo(25);
// console.log(result(11));

// ============================================================================
// ===== Tasks ================================================================
// ============================================================================

/** Task 1
1 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É 
—Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å–ø–∏—Åo–∫ —ñ–º–µ–Ω —É—á–Ω—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
2 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É 
—Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∫—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
3 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ —ñ–º'—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É 
–≤ —è–∫–æ–≥–æ –±—ñ–ª—å—à–µ –æ—á–∫—ñ–≤
*/

// const hogvarts = {
//   griffindor: [
//     {
//       name: 'Harry',
//       points: 17,
//     },
//     {
//       name: 'Hermiona',
//       points: 19,
//     },
//     {
//       name: 'Ron',
//       points: 14,
//     },
//   ],
//   sliserin: [
//     {
//       name: 'Draco',
//       points: 17,
//     },
//     {
//       name: 'Goyl',
//       points: 14,
//     },
//     {
//       name: 'Crabbe',
//       points: 5,
//     },
//   ],

//   getStudents(school) {
//     // const mySchool = this[school];
//     // console.log(mySchool);
//     // const names = mySchool.map((mate) => mate.name);
//     // console.log(names);

//     return this[school].map((mate) => mate.name);
//   },

//   getTotalPoints(school) {
//     // const mySchool = this[school];
//     // console.log(mySchool);
//     // const points = mySchool.reduce((acc, mate) => acc + mate.points, 0);
//     // console.log(points);

//     return this[school].reduce((acc, mate) => acc + mate.points, 0);
//   },

//   getWinner() {
//     // ----- varuant 1 —è–∫—â–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏ –≤—ñ–¥–æ–º—ñ —ñ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è -----------------
//     // const griffindorPoint = this.griffindor.reduce(
//     //   (acc, mate) => acc + mate.points,
//     //   0
//     // );
//     // const sliserinPoint = this.sliserin.reduce(
//     //   (acc, mate) => acc + mate.points,
//     //   0
//     // );
//     // return griffindorPoint > sliserinPoint ? 'griffindor' : 'sliserin';

//     // ----- variant 2 —è–∫—â–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω–∏—Ç–∏—Å—å -----------------------
//     const schools = Object.keys(hogvarts).filter((key) =>
//       Array.isArray(this[key])
//     );
//     console.log(schools);

//     return schools.reduce(
//       (acc, school) => (this[school].points > acc ? school : acc),
//       schools[0]
//     );
//   },
// };

// console.log('getStudents in griffindor: ', hogvarts.getStudents('griffindor'));
// console.log('getStudents in sliserin: ', hogvarts.getStudents('sliserin'));

// console.log(
//   'getTotalPoints in griffindor: ',
//   hogvarts.getTotalPoints('griffindor')
// );
// console.log(
//   'getTotalPoints in sliserin: ',
//   hogvarts.getTotalPoints('sliserin')
// );

// console.log('getWinner: ', hogvarts.getWinner());

/** Task 2
–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
1 –ú–∞—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
2 –ú–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏.
–§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –≤–∏–≤—á–∞—é—Ç—å —Ü—é –º–æ–≤—É.
*/

// const students = [
//   {
//     name: `Lika`,
//     language: `html`,
//   },
//   {
//     name: `Anton`,
//     language: `css`,
//   },
//   {
//     name: `Andriy`,
//     language: `js`,
//   },
//   {
//     name: `Vova`,
//     language: `html`,
//   },
//   {
//     name: `Alina`,
//     language: `css`,
//   },
//   {
//     name: `Egor`,
//     language: `js`,
//   },
//   {
//     name: `Aleksandr`,
//     language: `html`,
//   },
//   {
//     name: `Taras`,
//     language: `css`,
//   },
//   {
//     name: `Ivan`,
//     language: `js`,
//   },
//   {
//     name: `Make`,
//     language: `html`,
//   },
// ];

// function studentsByLanguage(students, language) {
//   return students
//     .filter((student) => student.language === language)
//     .map((student) => student.name); //[]
// }

// console.log(studentsByLanguage(students, 'html'));
// console.log(studentsByLanguage(students, 'css'));
// console.log(studentsByLanguage(students, 'js'));

/** task 3
–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∑–∞—Ä–æ–±–∏–≤ –∫–æ–∂–µ–Ω  —é–∑–µ—Ä
(—Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤
2 –ø–∞—Ä–∞–º–µ—Ç—Ä —ñ–º—è —Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
–§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –∑–∞—Ä–æ–±–∏–≤ (salary*month) )

–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤—Å—ñ—Ö —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤()
—Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤, 
–ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤—Å—ñ—Ö —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤);
*/

// const workers = [
//   {
//     name: 'Alex',
//     salary: 3500,
//     month: 12,
//   },
//   {
//     name: 'Dima',
//     salary: 2500,
//     month: 9,
//   },
//   {
//     name: 'Oleg',
//     salary: 1500,
//     month: 36,
//   },
// ];

// const workerSalary = function (workersArr, workerName) {
//   const worker = workersArr.find(({ name }) => name === workerName);
//   return worker.salary * worker.month;
// };

// function totalSalary(workersArr) {
//   // return workersArr.reduce(
//   //   (acc, worker) => (acc += worker.salary * worker.month),
//   //   0
//   // );
//   return workersArr.reduce(
//     (acc, { salary, month }) => (acc += salary * month),
//     0
//   );
// }

// console.log(workerSalary(workers, 'Alex'));
// console.log(workerSalary(workers, 'Dima'));
// console.log(workerSalary(workers, 'Oleg'));
// console.log(totalSalary(workers));

/** Task 4
1 –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
   1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤
   2 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤–∞ –∫–Ω–∏–≥–∏
–§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ü–º–µ–Ω–∞ —é–∑–µ—Ä—ñ–≤ (—Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä—ñ–Ω–≥–∏) –≤ —è–∫–∏—Ö —î —Ü—è –∫–Ω–∏–≥–∞ ("Harry Potter") 
\\\ "Anna, Oleksii"

2 –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–∫ –≤—Å—ñ—Ö —é–∑–µ—Ä—ñ–≤ —É —è–∫–∏—Ö —î –∫–ª—é—á age.
*/

// const friends = [
//   { name: 'Anna', books: ['Bible', 'Harry Potter'], age: 21 },
//   { name: 'Bob', books: ['War and peace', 'Romeo and Juliet'], age: 26 },
//   { name: 'Alice', books: ['War and peace', 'Romeo and Juliet'] },
//   {
//     name: 'Oleksii',
//     books: ['Bible', 'War and peace', 'Harry Potter', 'Romeo and Juliet'],
//     age: 26,
//   },
// ];

// function getUserByBook(users, book) {
//   return users
//     .filter((user) => user.books.includes(book))
//     .map((user) => user.name)
//     .join(', ');
// }
// function getUsersAge(users) {
//   let totalAge = 0;
//   users.forEach((user) => {
//     if (Object.keys(user).includes('age')) totalAge += user.age;
//   });
//   return totalAge;
// }

// console.log(getUserByBook(friends, 'Harry Potter'));
// console.log(getUserByBook(friends, 'Romeo and Juliet'));
// console.log(getUsersAge(friends));

/** Task 5
–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ 4 –º–µ—Ç–æ–¥–∏ –æ–±'—î–∫—Ç—É
1 –≤–∏–≤–æ–¥–∏—Ç—å —Å—É–º—É –Ω–∞ –∫–∞—Ä—Ç—ñ (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt())
2 –¥–æ–¥–∞—î –Ω–æ–≤—É –∫–∞—Ä—Ç—É (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt())
3 –∑–Ω—è—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt() —Ç–∞ —Å—É–º—É –≤ prompt())
4 –¥–æ–¥–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt() —Ç–∞ —Å—É–º—É –≤ prompt())
*/

// const bankSystem = {
//   privat: 1000,
//   mono: 1500,
//   checkCard() {
//     const name = prompt('Enter bank name to check your credit card:');
//     if (Object.keys(this).includes(name)) {
//       alert(`You have $${this[name]} on your ${name}bank credit card`);
//     } else {
//       alert('Thereis no such bank account\nTry again...');
//       this.checkCard();
//     }
//   },
//   addcard() {
//     const name = prompt('Enter bank name to add your credit card:');
//     if (Object.keys(this).includes(name)) {
//       alert('This bank account is already exist');
//     } else {
//       this[name] = 0;
//       alert(`Your credit card added successfully`);
//     }
//   },
//   deposit() {
//     const name = prompt('Enter bank name to put money onto your credit card:');
//     if (Object.keys(this).includes(name)) {
//       const amount = prompt(
//         'Enter amount of money to put onto your credit card:'
//       );
//       this[name] = Number(this[name]) + Number(amount);
//       alert(`Your account updated successfull\nTotal amount is $${this[name]}`);
//     } else {
//       alert('Thereis no such bank account\nTry again...');
//       // this.deposit();
//     }
//   },
//   withdrow() {
//     const name = prompt('Enter bank name to get money from your credit card:');
//     if (Object.keys(this).includes(name)) {
//       const amount = prompt(
//         'Enter amount of money to get from your credit card:'
//       );
//       if (amount > this[name]) {
//         alert('Not enougth money...');
//       } else {
//         this[name] = Number(this[name]) - Number(amount);
//         alert(`Operation successfull\nTotal amount is $${this[name]}`);
//       }
//     }
//   },
// };

// bankSystem.checkCard();
// bankSystem.addcard();
// console.log(bankSystem);
// bankSystem.checkCard();

// bankSystem.deposit();
// bankSystem.withdrow();

/** Task 6
–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ —à—É–∫–∞—Ç–∏ –Ω–∞—Ä—Ü–∏—Å–∞. –ì–æ–ª–æ–≤–Ω–∞ —É–º–æ–≤–∞ - –Ω–∞—Ä—Ü–∏—Å–∞ –∑–Ω–∞—é—Ç—å –≤—Å—ñ, 
–Ω–∞—Ä—Ü–∏—Å –Ω–µ –∑–Ω–∞—î –Ω—ñ–∫–æ–≥–æ.
*/

// const people1 = [
//   {
//     name: 'Alex',
//     know: ['Eva', 'Jhon'],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Alex'],
//   },
//   {
//     name: 'Eva',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Jhon',
//     know: ['Alex'],
//   },
// ]; //Not found

// const people2 = [
//   {
//     name: 'Alex',
//     know: ['Eva', 'Jhon'],
//   },
//   {
//     name: 'Jhon',
//     know: [],
//   },
//   {
//     name: 'Eva',
//     know: [],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Alex'],
//   },
// ]; // Not found

// const people3 = [
//   {
//     name: 'Alex',
//     know: ['Eva', 'Jhon'],
//   },
//   {
//     name: 'Jhon',
//     know: [],
//   },
//   {
//     name: 'Eva',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Alex'],
//   },
// ]; // Jhon

// function findNarciss(peopleList) {
//   let narcissName = '';
//   const narcissList = [];

//   // —Å–ø–∏—Å–æ–∫ (–º–∞—Å–∏–≤) —ñ–º–µ–Ω –º–æ–∂–ª–∏–≤–∏—Ö –Ω–∞—Ä—Ü–∏—Å—ñ–≤ - —Ç—ñ, —Ö—Ç–æ –Ω—ñ–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—î
//   peopleList
//     .filter((person) => person.know.length === 0)
//     .forEach((person) => {
//       narcissList.push(person.name);
//     });
//   console.log('Possible narcisses: ', narcissList);

//   // –Ω–∞—Ä—Ü–∏—Å—Å –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω
//   if (narcissList.length !== 1) {
//     narcissName = 'not found';
//     return narcissName;
//   }

//   // —Å–ø–∏—Å–æ–∫ (–º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤) –Ω–µ –Ω–∞—Ä—Ü–∏—Å—ñ–≤ - —Ç—ñ, —Ö—Ç–æ —Ö–æ—á –∫–æ–≥–æ—Å—å –∑–Ω–∞—î
//   const personsList = peopleList.filter((person) => person.know.length !== 0);
//   // console.log('Not narcisses: ', personsList);

//   // –Ω–∞—Ä—Ü–∏—Å–∞ –º–∞—é—Ç—å –∑–Ω–∞—Ç–∏ –≤—Å—ñ
//   narcissName = narcissList[0];
//   personsList.forEach((person) => {
//     if (!person.know.includes(narcissName)) narcissName = 'not found';
//   });

//   return narcissName;
// }

// console.log('Narciss is', findNarciss(people1));
// console.log('Narciss is', findNarciss(people2));
// console.log('Narciss is', findNarciss(people3));

/** Task 7
–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ 
—ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º—É—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ —è–∫—â–æ –≤—ñ–Ω –º–∞—î –æ–±'—î–∫—Ç–∏ –≤ —è–∫–∏—Ö –¥—É–±–ª—é—é—Ç—å—Å—è 
–∞–π–¥—ñ —Ç–æ –∫–≤–æ–Ω—Ç—ñ—Ç—ñ —Ü–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–ª—é—Å—É–≤–∞—Ç–∏, –∞ —Ç—ñ –æ–±—î'–∫—Ç–∏ 
–≤ —è–∫–∏—Ö –∞–π–¥—ñ —Å–ø—ñ–≤–ø–∞–≤ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –º–∞—Å–∏–≤—É.
(–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—É—Ç—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
*/

const products = [
  {
    id: 'sku1',
    qty: 1,
  },
  {
    id: 'sku2',
    qty: 2,
  },
  {
    id: 'sku3',
    qty: 3,
  },
  {
    id: 'sku1',
    qty: 6,
  },
  {
    id: 'sku1',
    qty: 8,
  },
  {
    id: 'sku2',
    qty: 19,
  },
  {
    id: 'sku4',
    qty: 1,
  },
];

function sortByID(productsList) {
  return productsList.reduce((acc, product) => {
    const index = acc.findIndex((el) => el.id === product.id);

    if (index === -1) {
      acc.push(product);
    } else {
      acc[index].qty += product.qty;
    }
    return acc;
  }, []);

  // return productsList.reduce((acc, product) => {
  //   const item = acc.find((el) => el.id === product.id);

  //   if (!item) {
  //     acc.push(product);
  //   } else {
  //     acc[acc.indexOf(item)].qty += product.qty;
  //   }

  //   // if (item) {
  //   //   acc[acc.indexOf(item)].qty += product.qty;
  //   // } else {
  //   //   acc.push(product);
  //   // }

  //   return acc;
  // }, []);

  // return productsList.reduce((acc, product) => {
  //   if (!acc.find((el) => el.id === product.id)) {
  //     acc.push(product);
  //   } else {
  //     acc[acc.indexOf(acc.find((el) => el.id === product.id))].qty +=
  //       product.qty;
  //   }
  //   return acc;
  // }, []);
}

console.log(sortByID(products));
